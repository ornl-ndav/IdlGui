/*
 *                         Mapping file tool
 *           A part of the SNS Analysis Software Suite.
 *
 *                  Spallation Neutron Source
 *          Oak Ridge National Laboratory, Oak Ridge TN.
 *
 *
 *                             NOTICE
 *
 * For this software and its associated documentation, permission is granted
 * to reproduce, prepare derivative works, and distribute copies to the public
 * for any purpose and without fee.
 *
 * This material was prepared as an account of work sponsored by an agency of
 * the United States Government.  Neither the United States Government nor the
 * United States Department of Energy, nor any of their employees, makes any
 * warranty, express or implied, or assumes any legal liability or
 * responsibility for the accuracy, completeness, or usefulness of any
 * information, apparatus, product, or process disclosed, or represents that
 * its use would not infringe privately owned rights.
 *
 */

/**
 * 
 *
 * \file ~/BSS/BSS_TS_2006_11_16.cpp
 */

#include <cmath>
#include <cstring>
#include <fstream>
#include <iostream>
#include <string>

/**
 * \brief This program is only use to fake the behavior of a real mapping file
 *
 * The mapping file generated by this program will be used by an histogram file
 * already mapped. 
 */

using namespace std;

static const std::string FILENAME("BSS_TS_2006_11_16.dat");

static const int NBR_BANK = 17;           //total number of banks(=8 He tubes)
static const int NBR_BANK_ON_TOP = 8;     //number of bank on top    
static const int NBR_BANK_ON_BOTTOM = 8;  //number of bank at the bottom
static const int NBR_TUBE_PER_BANK = 8;   //number of tubes per bank
static const int NBR_PIXEL_PER_TUBE = 64; //number of pixel per He tube
//number of pixel per He Tube in diffraction detectors
static const int NBR_PIXEL_PER_TUBE_DIFFRACTION = 128; 
static const int FIRST_BOTTOM_BANK_INDEX = 8; //first bank index of lower part
static const int TOTAL_NBR_TUBES_PAIR = (NBR_TUBE_PER_BANK * 
                                        (NBR_BANK_ON_TOP +
                                         NBR_BANK_ON_BOTTOM))/2;
typedef int int32_t;

int main()
{
  // Calcul real pixelIDs
  int pixelid[(NBR_BANK-1) * NBR_TUBE_PER_BANK * NBR_PIXEL_PER_TUBE +
              NBR_PIXEL_PER_TUBE_DIFFRACTION*NBR_TUBE_PER_BANK];

  int total_pixel = 9216;

  int pixel_number=0;

  for (size_t i=0 ; i<total_pixel ; ++i)
    {
      pixelid[pixel_number]= pixel_number;
      ++pixel_number;
    }

  // Create binary file of real pixelIDs
  std::ofstream file(FILENAME.c_str(),std::ios::binary);
  file.write((char *)(&pixelid),sizeof(pixelid));
  file.close();

  return 0;
}

